#ifndef H__RESOURCETEXTURE_180120141738__H
#define H__RESOURCETEXTURE_180120141738__H

#include "IResource.h"
#include "DataTexture.h"
#include "tools/Point.h"
#include "tools/Rectangle.h"
#include "tools/WithSmartPtr.h"

#include <iostream>
#include <string>
#include <vector>

///////////////////////////////////////////////////////////////////////////////
// Resource representing a set of images
///////////////////////////////////////////////////////////////////////////////

class ResourceTexture : public IResource, public WithSmartPtr<ResourceTexture>
{
public:
	ResourceTexture(/*PtrImage Img*/);
	~ResourceTexture(void);

	///////////////////////////////////////////////////////////////////////////
	// 
	///////////////////////////////////////////////////////////////////////////
	PtrTexture getTexture() {return myTexture.getTexture();}

	///////////////////////////////////////////////////////////////////////////
	/// Sets the texture path for further loading
	/// \params transp  Transparency color
	///			path Texture path
	///////////////////////////////////////////////////////////////////////////
	void setTexturePath(const Color& transp, const std::string& path);

	///////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////
	void setTexturePath(const std::string& path);

	///////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////
	virtual void reload(bool smooth = false);

	///////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////
	virtual void free();

protected:
	//int id; //ok ?
	DataTexture<PtrTexture> myTexture;
	std::string myPath;
	bool myIsTransparentColor;
	Color myTransparentColor;
};

//typedef std::shared_ptr<ResourceTexture> PtrResourceTexture;

#endif