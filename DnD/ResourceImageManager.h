#pragma once
#include "ResourcesManager.h"
#include "ResourceImage.h"
#include "tools/Tools.h"

#include <boost/smart_ptr.hpp>

///////////////////////////////////////////////////////////////////////////////
// Gestionnaire d'ElementSkins
///////////////////////////////////////////////////////////////////////////////
class ResourceImageManager : 
	public ResourcesManager<ResourceImage, int, ResourceImageManager>
{
public:
	ResourceImageManager(void);
	~ResourceImageManager(void);

public:
	///////////////////////////////////////////////////////////////////////////
	// Héritée. Libere toutes les ressources qui sont uniquement utilisées par 
	// le manager
	///////////////////////////////////////////////////////////////////////////
	virtual void freeResources();

	///////////////////////////////////////////////////////////////////////////
	// Héritée. Libère la ressource id si seul le manager l'utilise
	///////////////////////////////////////////////////////////////////////////
	virtual void freeResource(int id);

	///////////////////////////////////////////////////////////////////////////
	// Précharge toutes les ressources utilisables par le manager : Offsets,
	// et couleur de transparence
	///////////////////////////////////////////////////////////////////////////
	bool preload();

protected:
	//PtrRessource chercherRessource(int id);
	///////////////////////////////////////////////////////////////////////////
	// Héritée. Charge la ressource id
	///////////////////////////////////////////////////////////////////////////
	virtual PtrResource loadResource(int id);
	//static void th_chargement(void* v);

//protected:
//	std::vector<boost::shared_ptr<sf::Thread> > MonThread;
};

typedef ResourceImageManager::PtrResource PtrResourceImage;
