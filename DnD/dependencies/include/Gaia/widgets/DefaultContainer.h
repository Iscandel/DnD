#ifndef H__DEFAULTCONTENEUR_110920111313__H
#define H__DEFAULTCONTENEUR_110920111313__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/widgets/BaseWidget.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief Simple container, aimed at grouping widgets while being invisible.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL DefaultContainer :
	public gaia::BaseWidget
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param x: X position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param y: Y position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param width: Width of the widget.
	///
	/// \param height: Height of the widget.
	///////////////////////////////////////////////////////////////////////////
	DefaultContainer(const std::string& name = "", 
					 int x = 0, 
					 int y = 0, 
					 int width = 0, 
					 int height = 0);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param dimensions: Rectangle defining the widget size (top left 
	/// position is relative to parent widget, or the screen if the widget is 
	/// the top level widget).
	///////////////////////////////////////////////////////////////////////////
	DefaultContainer(const std::string& name, const IntRect& dimensions);

	//Widget type.
	//static std::string myWidgetType;

protected:
	///////////////////////////////////////////////////////////////////////////////
	// \brief Containers don't handle / use events.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleMousePressed_impl(MouseEvent&) {return false;}

	///////////////////////////////////////////////////////////////////////////////
	// \brief Containers don't handle / use events.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleMouseReleased_impl(MouseEvent&) {return false;}

	///////////////////////////////////////////////////////////////////////////////
	// \brief Containers don't handle / use events.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleDoubleClick_impl(MouseEvent&) {return false;}

	///////////////////////////////////////////////////////////////////////////////
	// \brief Containers don't handle / use events.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleMouseHover_impl(MouseEvent&) {return false;}

	///////////////////////////////////////////////////////////////////////////////
	// \brief Containers don't handle / use events.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleMouseWheel_impl(MouseEvent&) {return false;}

	///////////////////////////////////////////////////////////////////////////////
	// \brief Containers don't handle / use events.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleKeyPressed_impl(KeyboardEvent&) {return false;}

	///////////////////////////////////////////////////////////////////////////////
	// \brief Containers don't handle / use events.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleKeyReleased_impl(KeyboardEvent&) {return false;}

	///////////////////////////////////////////////////////////////////////////////
	// \brief Containers don't handle / use events.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleTextEntered_impl(KeyboardEvent&) {return false;}
};

///////////////////////////////////////////////////////////////////////////////
/// \brief We register the static DefaultContainer type.
///////////////////////////////////////////////////////////////////////////////
GAIA_REGISTER_TYPE(DefaultContainer)

} //end namespace

#endif