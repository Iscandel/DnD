#ifndef H__PROGRESSBAR_110920111333__H
#define H__PROGRESSBAR_110920111333__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/widgets/BaseWidget.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief Widget displaying the progression of some task.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL ProgressBar :
	public BaseWidget
{
public:
	enum Direction
	{
		HORIZONTAL,
		VERTICAL
	};
	enum Sense
	{
		LTRBTT, ///< Left to right / bottom to top
		RTLTTB ///<Right to left / Top to bottom
	};

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param x: X position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param y: Y position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param width: Width of the widget.
	///
	/// \param height: Height of the widget.
	///////////////////////////////////////////////////////////////////////////
	ProgressBar(const std::string& name = "", 
				int x = 0, 
				int y = 0, 
				int width = 0, 
				int height = 0);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param dimensions: Rectangle defining the widget size (top left 
	/// position is relative to parent widget, or the screen if the widget is 
	/// the top level widget).
	///////////////////////////////////////////////////////////////////////////
	ProgressBar(const std::string& name, const IntRect& dimensions);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Sets the percentage given to the progressBar. The value must be
	/// comprised between 0.f and 1.f.
	///
	/// \param perc : Value to set.
	///////////////////////////////////////////////////////////////////////////
	void setValue(float perc);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Sets the percentage given to the progressBar. The value must be
	/// comprised between 0 and 100
	///
	/// \param perc : Value to set.
	///////////////////////////////////////////////////////////////////////////
	void setValue(int perc);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Modifies the ProgressBar's value adding the given value.
	///
	/// The given value must be in the range [0.f, 1.f]. If the final value 
	/// computed exceeds the bounds, it is re-adjusted.
	///
	/// \param value : Value to add (0.f to 1.f).
	///////////////////////////////////////////////////////////////////////////
	void modifiyValue(float value);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the progressBar's current value (0.f to 1.f)
	///////////////////////////////////////////////////////////////////////////
	float getValue() const {return myPercentage;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Sets the direction of the progression.
	///
	/// \param d : The direction to set.
	///////////////////////////////////////////////////////////////////////////
	void setDirection(Direction d) {myDirection = d;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the direction of the progression.
	///
	/// \return The direction of the progression.
	///////////////////////////////////////////////////////////////////////////
	Direction getDirection() const {return myDirection;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Defines the sense of the progression, depending on the direction.
	///
	/// \param s : Sense to set.
	///////////////////////////////////////////////////////////////////////////
	void setSense(Sense s) {mySense = s;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the sens of the progression.
	/// 
	/// \return The sense.
	///////////////////////////////////////////////////////////////////////////
	Sense getSense() const {return mySense;}

	//Widget type
	//static const std::string myWidgetType;

protected:
	float myPercentage;
	Direction myDirection;
	Sense mySense;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief We register the static ProgressBar type.
///////////////////////////////////////////////////////////////////////////////
GAIA_REGISTER_TYPE(ProgressBar)

} //end namespace

#endif