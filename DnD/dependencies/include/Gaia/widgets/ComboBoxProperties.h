#ifndef H__COMBOBOXPROPERTIES_100320152226__H
#define H__COMBOBOXPROPERTIES_100320152226__H

#include "Gaia/Property.h"

namespace gaia
{
namespace properties
{
///////////////////////////////////////////////////////////////////////////////
// \brief Text property of Text widget
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL ComboBoxSetText : public Property
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name : Property name.
	///////////////////////////////////////////////////////////////////////////
	ComboBoxSetText(const std::string& nom);

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Applies the property to the widget. You shou
	///
	/// \param target : The widget we want to apply the property.
	/// \param value : A string describing the action to set. 
	///////////////////////////////////////////////////////////////////////////
	virtual void setProperty(BaseWidget& target, const std::string& value); 
};

///////////////////////////////////////////////////////////////////////////////
// \brief Property text color of Text.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL ComboBoxSetTextColor : public Property
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name : Property name.
	///////////////////////////////////////////////////////////////////////////
	ComboBoxSetTextColor(const std::string& name);

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Applies the property to the widget. You shou
	///
	/// \param target : The widget we want to apply the property.
	/// \param value : A string describing the action to set. 
	///////////////////////////////////////////////////////////////////////////
	virtual void setProperty(BaseWidget& target, const std::string& value); 
};

/////////////////////////////////////////////////////////////////////////////////
//// \brief "font" property of Text.
/////////////////////////////////////////////////////////////////////////////////
//class GAIA_DLL LabelSetFont : public Property
//{
//public:
//	///////////////////////////////////////////////////////////////////////////
//	/// \brief Constructor.
//	///
//	/// \param name : Property name.
//	///////////////////////////////////////////////////////////////////////////
//	LabelSetFont(const std::string& name);
//
//	//@override
//	///////////////////////////////////////////////////////////////////////////
//	/// \brief Applies the property to the widget. You shou
//	///
//	/// \param target : The widget we want to apply the property.
//	/// \param value : A string describing the action to set. 
//	///////////////////////////////////////////////////////////////////////////
//	virtual void setProperty(BaseWidget& target, const std::string& value); 
//};

///////////////////////////////////////////////////////////////////////////////
// \brief "fontSize" property of Text.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL ComboBoxSetFontSize : public Property
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name : Property name.
	///////////////////////////////////////////////////////////////////////////
	ComboBoxSetFontSize(const std::string& name);

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Applies the property to the widget. You shou
	///
	/// \param target : The widget we want to apply the property.
	/// \param value : A string describing the action to set. 
	///////////////////////////////////////////////////////////////////////////
	virtual void setProperty(BaseWidget& target, const std::string& value); 
};

} //end namespace properties

} //end namespace

#endif