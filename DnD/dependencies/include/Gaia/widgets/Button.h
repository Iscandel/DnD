#ifndef H__BUTTON_100920111821__H
#define H__BUTTON_100920111821__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/widgets/BaseWidget.h"
#include "Gaia/widgets/IText.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
// \brief Button widget.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL Button : public BaseWidget, public IText
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param x: X position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param y: Y position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param width: Width of the widget.
	///
	/// \param height: Height of the widget.
	///////////////////////////////////////////////////////////////////////////
	Button(const std::string& name = "", int x = 0, int y = 0 , int width = 0, int height = 0);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param dimensions: Rectangle defining the widget size (top left 
	/// position is relative to parent widget, or the screen if the widget is 
	/// the top level widget).
	///////////////////////////////////////////////////////////////////////////
	Button(const std::string& name, const IntRect& dimensions);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Sets the images corresponding to the button states.
	///
	/// \param normalIm : Image for the normal state.
	/// \param hoverIm : Image for the hovered state.
	/// \param clickIm : Image for the clicked state.
	///////////////////////////////////////////////////////////////////////////
	void setImages(const Image& normalIm, 
				   const Image& hoverIm,
				   const Image& clickIm);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Set the text alignment.
	///
	/// \param ha : Type of alignment.
	///////////////////////////////////////////////////////////////////////////
	void setTextAlignment(BaseWidget::HorizontalAlignment ha);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the current text alignement.
	///
	/// \return Type of alignment.
	///////////////////////////////////////////////////////////////////////////
	BaseWidget::HorizontalAlignment getTextAlignment() const {return myTextAlignement;}
		
	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the text.
	///
	/// \param ha : Type of alignment.
	///////////////////////////////////////////////////////////////////////////
	const std::string& getText() const {return myText;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Set the text to draw.
	///
	/// \param text : Text to set.
	///////////////////////////////////////////////////////////////////////////
	void setText(const std::string& text) {myText = text;}

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief This function is called when the corresponding event is triggered.
	/// If a subscription was done, it calls the function previously given by
	/// user.
	///////////////////////////////////////////////////////////////////////////
	virtual void onWidgetEntered();

	///////////////////////////////////////////////////////////////////////////
	///\brief  This function is called when the corresponding event is triggered.
	/// If a subscription was done, it calls the function previously given by
	/// user.
	///
	/// \param ev: The corresponding mouse event.
	///////////////////////////////////////////////////////////////////////////
	virtual void onWidgetExited();

	///Widget type
	//static const std::string myWidgetType;

protected:
	//////////////////////////////////////////////////////////////////////////////
	/// \brief Handles in a generic way the response to a mouse event.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleKeyPressed_impl(KeyboardEvent& ev);

protected:
	BaseWidget::HorizontalAlignment myTextAlignement;

	std::string myText;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief We register the static button type
///////////////////////////////////////////////////////////////////////////////
GAIA_REGISTER_TYPE(Button)

} //end namespace

#endif