#ifndef H__SLIDER_211020121221__H
#define H__SLIDER_211020121221__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/widgets/BaseWidget.h"
#include "Gaia/widgets/TypedefList.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief A Slider
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL Slider : public BaseWidget
{
public:

	enum SliderOrientation {HORIZONTAL, VERTICAL};

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param x: X position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param y: Y position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param width: Width of the widget.
	///
	/// \param height: Height of the widget.
	///////////////////////////////////////////////////////////////////////////
	Slider(const std::string& name = "", 
			  int x = 0, 
			  int y = 0, 
			  int width = 0, 
			  int height = 0);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param dimensions: Rectangle defining the widget size (top left 
	/// position is relative to parent widget, or the screen if the widget is 
	/// the top level widget).
	///////////////////////////////////////////////////////////////////////////
	Slider(const std::string& name, const IntRect& dimensions);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Updates the scrolling.
	///
	/// \param elapsedTime :elapsed time since the last call to update(). Could
	/// be the frame time.
	///////////////////////////////////////////////////////////////////////////
	virtual void update(unsigned int elapsedTime);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Subscribes to this event enables to be notified when the
	/// Slider value changed. 
	///
	/// The function given as a parameter will be called when the event is 
	/// triggered.
	///
	/// \param function: A function pointer
	///
	/// \param instance: Pointer to the associated object. If you gives a free
	/// function, don't specify this argument.
	///////////////////////////////////////////////////////////////////////////
	template<class T, class Class, class Instance>
	void subscribeValueChanged(void (Class::*function)(T), Instance instance)
	{E_onValueChanged = bind1(function, instance);}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Defines the Slider's maximum value.
	///
	/// \param maximum :maximum value.
	///////////////////////////////////////////////////////////////////////////
	void setMaximum(int maximum);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Defines the Slider's minimum value.
	///
	/// \param maximum :minimum value.
	///////////////////////////////////////////////////////////////////////////
	void setMinimum(int minimum);

		///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the Slider's maximum value.
	///
	/// \return maximum value.
	///////////////////////////////////////////////////////////////////////////
	int getMaximum() {return myMaxValue;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the Slider's minimum value.
	///
	/// \return minimum value.
	///////////////////////////////////////////////////////////////////////////
	int getMinimum() {return myMinValue;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Defines the Slider orientation (vertical / horizontal).
	///
	/// \param orientation : The Slider orientation.
	///////////////////////////////////////////////////////////////////////////
	void setOrientation(SliderOrientation orientation) { myOrientation = orientation;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the Slider orientation.
	///
	/// \return The Slider orientation
	///////////////////////////////////////////////////////////////////////////
	SliderOrientation getOrientation() const { return myOrientation;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Defines the Slider's value (thumb visual position).
	///
	/// \param value : Value to set (min to max defined for the slider). If 
	/// value parameter is out of range, it is set to 'min' slider's value.
	///////////////////////////////////////////////////////////////////////////
	void setValue(int value);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the Slider's value.
	///
	/// \return The value (min to max).
	///////////////////////////////////////////////////////////////////////////
	int getValue() const {return myValue;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns a pointer to the Slider's thumb.
	///
	/// \return A pointer to the Slider's thumb.
	///////////////////////////////////////////////////////////////////////////
	PtrButton getThumb();

protected:
	///////////////////////////////////////////////////////////////////////////////
	/// \brief Handles in a generic way the response to a mouse event.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleMouseReleased_impl(MouseEvent& ev);

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Handles in a generic way the response to a mouse event.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleMouseHover_impl(MouseEvent& ev);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when the valued changed.
	///
	/// \param value : new Slider value.
	///////////////////////////////////////////////////////////////////////////
	void onValueChanged(float value);	

	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when the thumb was clicked.
	///
	/// \param ev : Associated mouse event
	///////////////////////////////////////////////////////////////////////////
	void clickThumb(MouseEvent& ev);

	void initThumb();

	void setThumbPosition();

protected:
	///Slider orientation
	SliderOrientation myOrientation;
	Point myOffsetThumbClick;

	bool myThumbIsPressed;

	const std::string PREFIX_INCREASE_BUTTON;
	const std::string PREFIX_DECREASE_BUTTON;
	const std::string PREFIX_THUMB;

	///Multiple of the step size to locate in the page
	float myPagePos;

	int myMinValue; ///< Minimum value
	int myMaxValue; ///< Maximum value
	int myValue; ///< Slider value (min to max).

	static const unsigned int SCROLLING_RATE;

	boost::function1<void, float> E_onValueChanged;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief We register the static Slider type.
///////////////////////////////////////////////////////////////////////////////
GAIA_REGISTER_TYPE(Slider)

} //end namespace

#endif

