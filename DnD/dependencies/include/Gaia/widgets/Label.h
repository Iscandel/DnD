#ifndef H__TEXT_10092011228__H
#define H__TEXT_10092011228__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/widgets/BaseWidget.h"
#include "Gaia/widgets/IText.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief Widget displaying text.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL Label : public BaseWidget, public IText
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param x: X position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param y: Y position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param width: Width of the widget.
	///
	/// \param height: Height of the widget.
	///////////////////////////////////////////////////////////////////////////
	Label(const std::string& name = "", int x = 0, int y = 0 , int width = 0, int height = 0);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param dimensions: Rectangle defining the widget size (top left 
	/// position is relative to parent widget, or the screen if the widget is 
	/// the top level widget).
	///////////////////////////////////////////////////////////////////////////
	Label(const std::string& name, const IntRect& dimensions);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param dimensions: Rectangle defining the widget size (top left 
	/// position is relative to parent widget, or the screen if the widget is 
	/// the top level widget).
	/// 
	/// \param fontSize : Character height.
	/// 
	/// \param c : Text color.
	///
	/// \param text : Text to assign.
	///////////////////////////////////////////////////////////////////////////
	Label(const std::string& name, 
			 const IntRect& dimensions, 
			 unsigned int fontSize, 
			 const Color& c, 
			 const std::string& text);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Adjusts the widget size to be the same as the text size.
	///////////////////////////////////////////////////////////////////////////
	void adjustSize();

	///////////////////////////////////////////////////////////////////////////
	/// \brief  Adjusts the text to constraint the widget to fit the given 
	/// width (so, the widget height could change).
	///////////////////////////////////////////////////////////////////////////
	void adjustSize(int maxWidth);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Set the label's text.
	///
	/// \param text : Text to set.
	///////////////////////////////////////////////////////////////////////////
	void setText(const std::string& text);
	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the label's text.
	///
	/// \return The text.
	///////////////////////////////////////////////////////////////////////////
	const std::string& getText() const {return myText;}

	//Widget type
	//static const std::string myWidgetType;

protected:
	std::string myText;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief We register the static Label type.
///////////////////////////////////////////////////////////////////////////////
GAIA_REGISTER_TYPE(Label)

} //end namespace

#endif