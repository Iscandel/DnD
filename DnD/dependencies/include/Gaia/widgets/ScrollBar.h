#ifndef H__SCROLLBAR_150920112134__H
#define H__SCROLLBAR_150920112134__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/widgets/BaseWidget.h"
#include "Gaia/widgets/TypedefList.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief A ScrollBar
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL ScrollBar : public BaseWidget
{
public:

	enum ScrollBarOrientation {HORIZONTAE, VERTICAL};

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param x: X position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param y: Y position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param width: Width of the widget.
	///
	/// \param height: Height of the widget.
	///////////////////////////////////////////////////////////////////////////
	ScrollBar(const std::string& name = "", 
			  int x = 0, 
			  int y = 0, 
			  int width = 0, 
			  int height = 0);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param dimensions: Rectangle defining the widget size (top left 
	/// position is relative to parent widget, or the screen if the widget is 
	/// the top level widget).
	///////////////////////////////////////////////////////////////////////////
	ScrollBar(const std::string& name, const IntRect& dimensions);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Updates the scrolling.
	///
	/// \param elapsedTime :elapsed time since the last call to update(). Could
	/// be the frame time.
	///////////////////////////////////////////////////////////////////////////
	virtual void update(unsigned int elapsedTime);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Subscribes to this event enables to be notified when the
	/// scrollBar value changed. 
	///
	/// The function given as a parameter will be called when the event is 
	/// triggered.
	///
	/// \param function: A function pointer
	///
	/// \param instance: Pointer to the associated object. If you gives a free
	/// function, don't specify this argument.
	///////////////////////////////////////////////////////////////////////////
	template<class T, class Class, class Instance>
	void subscribeValueChanged(void (Class::*function)(T), Instance instance)
	{E_onValueChanged = bind1(function, instance);}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Defines the page size.
	///
	/// \param length : Whole length of the page.
	///////////////////////////////////////////////////////////////////////////
	void setPageSize(float length);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the document length.
	///
	/// \return The page length.
	///////////////////////////////////////////////////////////////////////////
	float getPageSize() const {return myPageSize;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Defines the size of the visible area of the widget.
	///
	/// \param length : Length of the visible area.
	///////////////////////////////////////////////////////////////////////////
	void setVisibleAmount(float length);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the length of the visible area.
	///
	/// \return The length of the visible area.
	///////////////////////////////////////////////////////////////////////////
	float getVisibleAmount() const {return myVisibleAmount;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Unit increment / decrement of the ScrollBar.
	///
	/// It is the minimum amount to move the ScrollBar.
	///
	/// \param stepSize : The value to set.
	///////////////////////////////////////////////////////////////////////////
	void setStepSize(float stepSize);

	///////////////////////////////////////////////////////////////////////////
	// Définit la zone de la flèche haut gauche
	///////////////////////////////////////////////////////////////////////////
	//virtual void setHauteurFlecheHautGauche(int hauteur); //{maZoneFlecheHautGauche = zone;}

	///////////////////////////////////////////////////////////////////////////
	// Retourne la zone de la flèche haut gauche
	///////////////////////////////////////////////////////////////////////////
	//int getHauteurFlecheHautGauche();

	///////////////////////////////////////////////////////////////////////////
	// 
	///////////////////////////////////////////////////////////////////////////
	//virtual void setHauteurFlecheBasDroite(int hauteur); //{maZoneFlecheBasDroite = zone;}

	///////////////////////////////////////////////////////////////////////////
	//  Retourne la zone de la flèche bas droite
	///////////////////////////////////////////////////////////////////////////
	//int getHauteurFlecheBasDroite();

	///////////////////////////////////////////////////////////////////////////
	// Définit les dimensions du curseur
	///////////////////////////////////////////////////////////////////////////
	//virtual void setDimensionsCurseur(int retraitGauche, int largeur, int hauteur);

	///////////////////////////////////////////////////////////////////////////
	// Retourne les dimensions du curseur
	///////////////////////////////////////////////////////////////////////////
	//const IntRect& getDimensionsCurseur();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Defines the ScrollBar orientation (vertical / horizontal).
	///
	/// \param orientation : The ScrollBar orientation.
	///////////////////////////////////////////////////////////////////////////
	void setOrientation(ScrollBarOrientation orientation) { myOrientation = orientation;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the ScrollBar orientation.
	///
	/// \return The ScrollBar orientation
	///////////////////////////////////////////////////////////////////////////
	ScrollBarOrientation getOrientation() const { return myOrientation;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Defines the ScrollBar's value (thumb visual position).
	///
	/// \param value : Value to set (0.0 to 1.0).
	///////////////////////////////////////////////////////////////////////////
	void setValue(float value);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the ScrollBar's value.
	///
	/// \return The value (0.0 to 1.0).
	///////////////////////////////////////////////////////////////////////////
	float getValue() const {return myValue;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns a pointer to the decrease button (on the top or the
	/// left, depending on the orientation).
	///
	/// \return a pointer to the decrease button.
	///////////////////////////////////////////////////////////////////////////
	PtrButton getDecreaseButton();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns a pointer to the increase button (on the bottom or the
	/// right, depending on the orientation).
	///
	/// \return a pointer to the increase button.
	///////////////////////////////////////////////////////////////////////////
	PtrButton getIncreaseButton();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns a pointer to the ScrollBar's thumb.
	///
	/// \return A pointer to the ScrollBar's thumb.
	///////////////////////////////////////////////////////////////////////////
	PtrButton getThumb();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Modifies directly the page position by applying a multiplicative
	/// value to the step size.
	///
	/// \param multiplier : Stepsize multiplier value to give. Negative values
	/// to decrease, positive values to increase.
	///////////////////////////////////////////////////////////////////////////
	void modifyBlockPagePosition(int multiplier);

	///////////////////////////////////////////////////////////////////////////
	///
	///////////////////////////////////////////////////////////////////////////
	//virtual void onDimensionsChanged();

	//Widget type
	//static const std::string myWidgetType;

protected:
	///////////////////////////////////////////////////////////////////////////////
	/// \brief Handles in a generic way the response to a mouse event.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleMouseReleased_impl(MouseEvent& ev);

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Handles in a generic way the response to a mouse event.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleMouseHover_impl(MouseEvent& ev);

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Handles in a generic way the response to a mouse event.
	///////////////////////////////////////////////////////////////////////////////
	virtual bool handleMouseWheel_impl(MouseEvent& ev);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when the valued changed.
	///
	/// \param value : new Scrollbar value.
	///////////////////////////////////////////////////////////////////////////
	void onValueChanged(float value);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Updates the value and the thumb visual position by applying the
	/// given multiplier to the stepsize, and then modifying the page position.
	///
	/// \param multiplier : Multiplier to apply to the stepSize.
	///////////////////////////////////////////////////////////////////////////
	void updatePosition(int multiplier);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Updates the value and the thumb visual position by applying the
	/// given multiplier to the stepsize, and then modifying the page position.
	///
	/// \param multiplier : Multiplier to apply to the stepSize.
	///////////////////////////////////////////////////////////////////////////
	void initButtons();//int width, int height);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Computes the new Scrollbar's percentage from the data which
	/// defines it.
	///////////////////////////////////////////////////////////////////////////
	void computeValue();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Re-adjusts the page position on a scale consistent with the 
	/// current step size value, if necessary.
	///
	/// The Scrollbar's value should be recomputed if the page position was
	/// modified. This function is called when the thumb is released or when
	/// calling setValue().
	/////////////////////////////////////////////////////////////////////////////
	void correctPagePos();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Sets the visual thumb position.
	/////////////////////////////////////////////////////////////////////////////
	void setThumbPosition();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Checks the validity of the page position.
	///////////////////////////////////////////////////////////////////////////
	void adjustPagePosition();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when one of the two buttons was clicked.
	///
	/// \param ev : Associated mouse event
	///////////////////////////////////////////////////////////////////////////
	void clickButtons(MouseEvent& ev);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when one of the two buttons was released.
	///
	/// \param ev : Associated mouse event
	///////////////////////////////////////////////////////////////////////////
	void buttonReleased(MouseEvent& ev);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when the mouse exited a button.
	///
	/// \param ev : Associated event
	///////////////////////////////////////////////////////////////////////////
	void ButtonsExited(Event& ev);

protected:
	///Scrollbar orientation
	ScrollBarOrientation myOrientation;
	//bool monEstSourisPresse;
	Point myOffsetThumbClick;

	float myPageSize; ///<Whole document length
	float myVisibleAmount; ///<Length of the visible part
	float myStepSize; ///Unit increment / decrement

	bool myIncreaseButtonIsPressed;
	bool myDecreaseButtonIsPressed;
	bool myThumbIsPressed;
	//bool monBoutonSourisEstPresseGlissiere;

	const std::string PREFIX_INCREASE_BUTTON;
	const std::string PREFIX_DECREASE_BUTTON;
	const std::string PREFIX_THUMB;

	///Multiple of the step size to locate in the page
	float myPagePos;

	float myValue; ///< ScrollBar value (0.0 to 1.0).

	static const unsigned int SCROLLING_RATE;

	boost::function1<void, float> E_onValueChanged;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief We register the static ScrollBar type.
///////////////////////////////////////////////////////////////////////////////
GAIA_REGISTER_TYPE(ScrollBar)

} //end namespace

#endif