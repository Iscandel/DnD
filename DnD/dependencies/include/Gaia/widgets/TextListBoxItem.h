#ifndef H__TEXTLISTBOXITEM_240820111344
#define H__TEXTLISTBOXITEM_240820111344

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/widgets/BaseListBoxItem.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief Text implementation of a listBox item.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL TextListBoxItem : public BaseListBoxItem//<ListBox>
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param name: Widget name. Must be absolutely unique.
	///
	/// \param x: X position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param y: Y position relatively to the parent widget (or the window if
	/// it is the top level widget).
	///
	/// \param width: Width of the widget.
	///
	/// \param height: Height of the widget.
	///////////////////////////////////////////////////////////////////////////
	TextListBoxItem(const std::string& text, 
					const std::string& name = "", 
					int x = 0, 
					int y = 0, 
					int width = 0, 
					int height = 0);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Default Constructor.
	///////////////////////////////////////////////////////////////////////////
	TextListBoxItem();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Sets the selection color.
	///
	/// \param color : The color to set
	///////////////////////////////////////////////////////////////////////////
	void setSelectionColor(const Color& color) {mySelectionColor = color;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the text selection color.
	///
	/// \return The selection color.
	///////////////////////////////////////////////////////////////////////////
	const Color& getSelectionColor() const {return mySelectionColor;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Sets the item's text.
	///
	/// \param text :  Text to set
	///////////////////////////////////////////////////////////////////////////
	void setText(const std::string& text) {myText = text;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the item's text
	///
	/// \return The text.
	///////////////////////////////////////////////////////////////////////////
	const std::string& getText() {return myText;}

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws this item.
	///
	/// \param widget : The ListBox owning the item.
	///
	/// \param selected : Indicates whether the item is in a selected state or not.
	///
	/// \param Gfx : Pointer the graphic engine.
	///
	/// \param x : Top left X position of the item, relatively to the ListBox 
	/// coordinate system.
	///
	/// \param y : Top left Y position of the item, relatively to the ListBox 
	/// coordinate system.
	///////////////////////////////////////////////////////////////////////////
	virtual void drawItem(ListBox* widget, 
						  bool selected, 
						  BaseGraphics* Gfx, 
						  int x = 0, 
						  int y = 0);

protected:
	Color mySelectionColor; ///< Text selection color.
	std::string myText; ///< Item text.
};

///////////////////////////////////////////////////////////////////////////////
/// \brief We register the static TextListBoxItem type.
///////////////////////////////////////////////////////////////////////////////
GAIA_REGISTER_TYPE(TextListBoxItem)

} //end namespace

#endif