#ifndef H__WIDGETGROUP_11092112230__H
#define H__WIDGETGROUP_11092112230__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/widgets/BaseWidget.h"
#include "Gaia/Config.h"

namespace gaia
{
class ISelectable;

///////////////////////////////////////////////////////////////////////////////
// \brief Template class enabling to add allowing widgets to a group.
///////////////////////////////////////////////////////////////////////////////
template<class T>
class GroupWidgets// : public BaseWidget
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// Adds a widget to this group.
	///
	/// \param p : The widget to add.
	///////////////////////////////////////////////////////////////////////////
	virtual void add(T* p);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Removes a widget from the group.
	///////////////////////////////////////////////////////////////////////////
	virtual void remove(T* p);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns vector containing pointers on all elements of the group.
	///////////////////////////////////////////////////////////////////////////
	std::vector<T*>& getElements() {return myWidgets;}

protected:
	std::vector<T*> myWidgets; //Widget list of the group.
};



//=============================================================================
///////////////////////////////////////////////////////////////////////////////
template<class T>
void GroupWidgets<T>::add(T* p)
{
	myWidgets.push_back(p);
	//p->add(this);
}

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
template<class T>
void GroupWidgets<T>::remove(T* p)
{
	for(unsigned int i = 0; i < myWidgets.size(); i++)
	{
		if(myWidgets[i] == p)
		{
			myWidgets.erase(myWidgets.begin() + i);
			return;
		}
	}
}

//Should be the only valid typedef
typedef boost::shared_ptr<GroupWidgets<ISelectable> >PtrSelectableWidgetGroup;

} //end namespace

#endif
