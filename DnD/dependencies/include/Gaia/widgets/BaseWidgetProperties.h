#ifndef H__BASEWIDGETPROPERTY_240920112004__H
#define H__BASEWIDGETPROPERTY_240920112004__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/Property.h"

namespace gaia
{
namespace properties
{
///////////////////////////////////////////////////////////////////////////////
/// "Visible" property of widgets
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL BaseVisible : public Property
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name : Property name.
	///////////////////////////////////////////////////////////////////////////
	BaseVisible(const std::string& name);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Applies the property to the widget.
	///
	/// \param target : The widget we want to apply the property.
	/// \param value : A string describing the action to set. 
	///////////////////////////////////////////////////////////////////////////
	virtual void setProperty(BaseWidget& target, const std::string& value); 
};

///////////////////////////////////////////////////////////////////////////////
/// \brief "Modal" property of widgets
///////////////////////////////////////////////////////////////////////////////
class BaseModal : public Property
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name : Property name.
	///////////////////////////////////////////////////////////////////////////
	BaseModal(const std::string& name);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Applies the property to the widget.
	///
	/// \param target : The widget we want to apply the property.
	/// \param value : A string describing the action to set. 
	///////////////////////////////////////////////////////////////////////////
	virtual void setProperty(BaseWidget& target, const std::string& value); 
};

///////////////////////////////////////////////////////////////////////////////
/// \brief "Opaque" property of widgets
///////////////////////////////////////////////////////////////////////////////
class BaseOpaque : public Property
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name : Property name.
	///////////////////////////////////////////////////////////////////////////
	BaseOpaque(const std::string& name);

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Applies the property to the widget.
	///
	/// \param target : The widget we want to apply the property.
	/// \param value : A string describing the action to set. 
	///////////////////////////////////////////////////////////////////////////
	void setProperty(BaseWidget& target, const std::string& value); 
};

///////////////////////////////////////////////////////////////////////////////
/// \brief "Focusable" property of widgets
///////////////////////////////////////////////////////////////////////////////
class BaseFocusable : public Property
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name : Property name.
	///////////////////////////////////////////////////////////////////////////
	BaseFocusable(const std::string& name);

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Applies the property to the widget.
	///
	/// \param target : The widget we want to apply the property.
	/// \param value : A string describing the action to set. 
	///////////////////////////////////////////////////////////////////////////
	void setProperty(BaseWidget& target, const std::string& value); 
};

///////////////////////////////////////////////////////////////////////////////
/// \brief "Enable" property of widgets
///////////////////////////////////////////////////////////////////////////////
class BaseEnable : public Property
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name : Property name.
	///////////////////////////////////////////////////////////////////////////
	BaseEnable(const std::string& name);

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Applies the property to the widget.
	///
	/// \param target : The widget we want to apply the property.
	/// \param value : A string describing the action to set. 
	///////////////////////////////////////////////////////////////////////////
	void setProperty(BaseWidget& target, const std::string& value); 
};

///////////////////////////////////////////////////////////////////////////////
/// \brief "Enable" property of widgets
///////////////////////////////////////////////////////////////////////////////
class BaseEnableDoubleClick : public Property
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name : Property name.
	///////////////////////////////////////////////////////////////////////////
	BaseEnableDoubleClick(const std::string& name);

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Applies the property to the widget.
	///
	/// \param target : The widget we want to apply the property.
	/// \param value : A string describing the action to set. 
	///////////////////////////////////////////////////////////////////////////
	void setProperty(BaseWidget& target, const std::string& value); 
};

///////////////////////////////////////////////////////////////////////////////
/// \brief "Focus" property of widgets
///////////////////////////////////////////////////////////////////////////////
class BaseFocus : public Property
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param name : Property name.
	///////////////////////////////////////////////////////////////////////////
	BaseFocus(const std::string& name);

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Applies the property to the widget.
	///
	/// \param target : The widget we want to apply the property.
	/// \param value : A string describing the action to set. 
	///////////////////////////////////////////////////////////////////////////
	void setProperty(BaseWidget& target, const std::string& value); 
};


} //end namespace properties

} //end namespace

#endif
