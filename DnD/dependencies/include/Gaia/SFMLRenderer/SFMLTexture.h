#ifndef H__SFMLTEXTURE__H
#define H__SFMLTEXTURE__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/SFMLRenderer/SFMLConfig.h"
#include "Gaia/BaseTexture.h"

#include <SFML/Graphics.hpp>

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief SFML implementation of the Texture class.
///////////////////////////////////////////////////////////////////////////////
class GAIA_SFML_DLL SFMLTexture : public gaia::BaseTexture
{
public:
	///////////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param image : Pointer to the underlying SFML image. This image is 
	/// destroyed when this SFML texture is destroyed.
	///////////////////////////////////////////////////////////////////////////////
	SFMLTexture(sf::Texture* image);

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Destructor.
	///////////////////////////////////////////////////////////////////////////////
	~SFMLTexture(void);

//	virtual SFMLImage* get() {return this;}
		///////////////////////////////////////////////////////////////////////////////
	/// \brief Returns the texture height.
	///
	///	\return The height.
	///////////////////////////////////////////////////////////////////////////////
	int getHeight() const {return myImage->getSize().y;}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Returns the texture width.
	///
	///	\return The width.
	///////////////////////////////////////////////////////////////////////////////
	int getWidth() const {return myImage->getSize().x;}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Returns the underlying SFML image.
	///
	///	\return The contained SFML image.
	///////////////////////////////////////////////////////////////////////////////
	sf::Texture& getSFMLImage() {return *myImage;}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Defines whether the image should be smoothed when drawn or not.
	///
	/// \param smooth : True to smooth, false not to smooth.
	///////////////////////////////////////////////////////////////////////////////
	void setSmooth(bool smooth);

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Direct conversion to an sf::Image.
	///////////////////////////////////////////////////////////////////////////////
	operator sf::Texture& () {return *myImage;}

protected:
	sf::Texture* myImage;
};

///Smart pointer to an SFML texture
typedef boost::shared_ptr<SFMLTexture> PtrSFMLTexture; 

} //end namespace

#endif