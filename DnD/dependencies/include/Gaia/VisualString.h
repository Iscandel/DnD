#ifndef H__VISUALSTRING_090920110230__H
#define H__VISUALSTRING_090920110230__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/BaseFont.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief Visual string, owning a font, a font size, and a color.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL VisualString
{
public:
	///////////////////////////////////////////////////////////////////////////////
	/// \brief Default constructor.
	///////////////////////////////////////////////////////////////////////////////
	VisualString() {}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param col : Text color
	/// \param charHeight: Character height.
	///////////////////////////////////////////////////////////////////////////////
	VisualString(const Color& col, unsigned int charHeight);

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Sets the text color.
	///
	/// \param col : Text color to set.
	///////////////////////////////////////////////////////////////////////////////
	void setColor(const Color& col) {myColor = col;}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Returns the text color.
	///
	/// \return The text color.
	///////////////////////////////////////////////////////////////////////////////
	const Color& getColor() const {return myColor;}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Sets the character height.
	///
	/// \param height : The character height.
	///////////////////////////////////////////////////////////////////////////////
	void setHeight(unsigned int height) {mySize = height;}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Returns the character height.
	///
	/// \return The character height.
	///////////////////////////////////////////////////////////////////////////////
	unsigned int getHeight() const {return mySize;}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Sets the text font.
	///
	/// \param font : The font to set.
	///////////////////////////////////////////////////////////////////////////////
	void setFont(PtrFont font) {myFont = font;}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Returns the text font.
	///
	/// \return A pointer to the text font.
	///////////////////////////////////////////////////////////////////////////////
	PtrFont getFont() {return myFont;}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Draws the string
	///
	/// \param Gfx : A pointer to the graphics engine.
	/// \param text : The text to draw.
	/// \param x : The X position.
	/// \param y : The y position.
	///////////////////////////////////////////////////////////////////////////////
	void draw(BaseGraphics* Gfx, const std::string& text, int x, int y);

protected:
	Color myColor;
	unsigned int mySize;

	PtrFont myFont;
};

}
#endif