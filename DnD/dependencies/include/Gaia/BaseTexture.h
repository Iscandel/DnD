#ifndef H__BASETEXTURE_080920110237__H
#define H__BASETEXTURE_080920110237__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <string>

#include <boost/smart_ptr.hpp>

#include "Gaia/Config.h"

namespace gaia
{
class BaseImageLoader;
class BaseTexture;

typedef boost::shared_ptr<BaseTexture> PtrTexture;

///////////////////////////////////////////////////////////////////////////////
/// \brief Base class for texture.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL BaseTexture
{
public:
	///////////////////////////////////////////////////////////////////////////////
	/// \brief Default constructor.
	///////////////////////////////////////////////////////////////////////////////
	BaseTexture(void);

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Virtual destructor.
	///////////////////////////////////////////////////////////////////////////////
	virtual ~BaseTexture(void);

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Sets the shared image loader. It must have been dynamically 
	/// allocated. Destruction is handled here.
	///
	///	\param loader: Pointer to the loader.
	///////////////////////////////////////////////////////////////////////////////
	static void setLoader(BaseImageLoader* loader);

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Gets a reference to the shared image loader.
	///
	///	\return A reference to the loader.
	///////////////////////////////////////////////////////////////////////////////
	static BaseImageLoader& getLoader() {return *(myImageLoader.get());}

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Loads a texture using the current image loader and the given path.
	///
	///	\param path: Image path.
	///
	/// \return A pointer on a texture.
	///////////////////////////////////////////////////////////////////////////////
	static PtrTexture load(const std::string& chemin);

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Returns the texture height.
	///
	///	\return The height.
	///////////////////////////////////////////////////////////////////////////////
	virtual int getHeight() const = 0;

	///////////////////////////////////////////////////////////////////////////////
	/// \brief Returns the texture width.
	///
	///	\return The width.
	///////////////////////////////////////////////////////////////////////////////
	virtual int getWidth() const = 0;

protected:
	static boost::shared_ptr<BaseImageLoader> myImageLoader;
};

} // end namespace

#endif