#ifndef H__OBSERVER_04072011_0053__H
#define H__OBSERVER_04072011_0053__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <vector>

#include "Gaia/Config.h"

namespace gaia
{
class Observable;

///////////////////////////////////////////////////////////////////////////////
/// \brief Part of the Observer / Observable pattern.
///
/// An observer notices the changements in the observed object, which calls the
/// observers's update method as a consequence.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL Observer
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Virtual destuctor.
	///////////////////////////////////////////////////////////////////////////
	virtual ~Observer(void);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when the observable object is modified.
	///
	/// \param obs : A pointer to the observable object.
	///////////////////////////////////////////////////////////////////////////
	virtual void update(Observable* obs) = 0;
};

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
/// \brief Part of the Observer / observable pattern.
///
/// This is the observed class.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL Observable
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///////////////////////////////////////////////////////////////////////////
	Observable();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Virtual destructor.
	///////////////////////////////////////////////////////////////////////////
	virtual ~Observable();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Adds a new observer for this object.
	///
	/// \param obs : A pointer to the observer to add.
	///////////////////////////////////////////////////////////////////////////
	void addObserver(Observer* obs);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Removes a previouly added observer.
	///
	/// \param obs : A pointer to the observer to remove.
	///////////////////////////////////////////////////////////////////////////
	void removeObserver(Observer* obs);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Removes all the observers.
	///////////////////////////////////////////////////////////////////////////
	void removeObservers();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Notifies observers when a relevant change happened to this object.
	///////////////////////////////////////////////////////////////////////////
	void notifyObservers();

protected:
	std::vector<Observer*> myObservers; ///< Observer list.

	/// To avoid "circular updates : observable notifies -> observer's update method forces Observable to 
	/// notify again -> observer's update method forces, etc...
	bool myIsCurrentlyUpdating; 
};

};

#endif