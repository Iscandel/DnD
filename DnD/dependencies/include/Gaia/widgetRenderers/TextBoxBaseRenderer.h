#ifndef H__TEXTBOXBASERENDERER_270820112140__H
#define H__TEXTBOXBASERENDERER_270820112140__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
//#include "Gaia/widgetRenderers/WidgetRenderer.h"
#include "Gaia/widgetRenderers/TextWidgetBaseRenderer.h"
#include "Gaia/widgets/TextBox.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief Base renderer for TextBox
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL TextBoxBaseRenderer : public TplTextWidgetRenderer<TextBox>
	//public TplWidgetRenderer<TextBox>
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param w : The widgets set to the renderer. Must be a Textbox class, or
	/// inherited.
	///////////////////////////////////////////////////////////////////////////
	TextBoxBaseRenderer(PtrWidget w = PtrWidget());

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when the renderer was assigned to a widget.
	/// 
	/// Copies the renderer properties.
	///
	/// \param w : The widget owning the renderer.
	///////////////////////////////////////////////////////////////////////////
	void onAssignedToWidget(PtrWidget w);

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Computes the caret position of the model, from the given pixel
	/// position relative to the widget coordinate system.
	///
	/// \param pos : Mouse position, in the widget coordinate system.
	///////////////////////////////////////////////////////////////////////////
	int computeCaretPosition(const Point& pos);

	///////////////////////////////////////////////////////////////////////////
	/// \brief This function returns an invalid caret value, because it is 
	/// onlyn relevant for multiline text fields, and it is not the case for a
	/// TextBox.
	///
	/// \param isNewLineSup : Textbox doesn't handle multiline
	///////////////////////////////////////////////////////////////////////////
	int computeCaretPosition(bool /*isNewLineSup*/) {return -1;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the text area defined for the TextBox.
	///
	/// \return The text area.
	///////////////////////////////////////////////////////////////////////////
	//Rect<double> getTextArea();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when notified by the model.
	///
	/// \param Observable : Pointer to the model, calling this function.
	///////////////////////////////////////////////////////////////////////////
	virtual void update(Observable*);

protected:
	float myTextOffsetX; ///< Display offset for the whole text.
	std::string myTextDisplayed; ///< Currently displayed text.
};

} //end namespace

#endif