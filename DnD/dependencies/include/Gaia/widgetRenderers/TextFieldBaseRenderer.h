#ifndef H__TEXTFIELDBASERENDERER__240920111650__H
#define H__TEXTFIELDBASERENDERER__240920111650__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
//#include "Gaia/widgetRenderers/WidgetRenderer.h"
#include "Gaia/widgetRenderers/TextWidgetBaseRenderer.h"
#include "Gaia/widgets/TextField.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief Base class for TextField renderer
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL TextFieldBaseRenderer : public TplTextWidgetRenderer<TextField>
	//public gaia::TplWidgetRenderer<TextField>
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param widget : A pointer to the widget owing the renderer.
	///////////////////////////////////////////////////////////////////////////
	TextFieldBaseRenderer(PtrWidget widget = PtrWidget());

	//Rect<double> getTextArea();

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Updates the widget renderer. Should be overriden in derived
	/// classes if necessary.
	///
	/// \param elapsedTime : Elapsed time since the last frame.
	///////////////////////////////////////////////////////////////////////////
	void update(unsigned int elapsedTime);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Computes the caret position of the model, from the given pixel
	/// position relative to the widget coordinate system.
	///
	/// \param pos : Mouse position, in the widget coordinate system.
	///////////////////////////////////////////////////////////////////////////
	virtual int computeCaretPosition(const Point& pos);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Computes the caret position of the model, in the case it is
	/// moved using the keyboard.
	///
	/// \param isNewLineSup : if true, the caret is moved up. If false, the
	/// caret is moved down.
	///////////////////////////////////////////////////////////////////////////
	virtual int computeCaretPosition(bool isNewLineSup);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Sets the text selection color.
	///
	/// \param col : Selection color
	///////////////////////////////////////////////////////////////////////////
	void setSelectionColor(const Color& col) {mySelectionColor = col;}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the text selection color.
	///
	/// \return The selection color
	///////////////////////////////////////////////////////////////////////////
	const Color& getSelectionColor() const {return mySelectionColor;}

protected:
	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when the observable object is modified.
	///
	/// \param obs : A pointer to the observable object.
	///////////////////////////////////////////////////////////////////////////
	virtual void update(Observable*) {}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the widget. 
	///
	/// Should be overriden by derived class to perform the drawing.
	///
	/// \param Gfx : Pointer the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	//virtual void draw_impl(BaseGraphics* Gfx);

protected:
	
	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the background. 
	///
	/// \param Gfx : Pointer the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	//void drawBackground(BaseGraphics* Gfx);

	
	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the text. 
	///
	/// \param Gfx : Pointer the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	//void drawText(BaseGraphics* Gfx);

	//@override
	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the caret. 
	///
	/// \param Gfx : Pointer the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	//void drawCaret(BaseGraphics* Gfx);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the selection. 
	///
	/// \param Gfx : Pointer the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	//void drawSelection(BaseGraphics* Gfx);

protected:
	bool myMustDisplayCaret; ///< Indicates whether we should display the caret.
	float myElapsedTime; ///< Elapsed time

	Color mySelectionColor;
	Color myBackgroundColor;
};

}//end namespace

#endif