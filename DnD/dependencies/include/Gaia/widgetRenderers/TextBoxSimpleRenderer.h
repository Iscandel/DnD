#ifndef H__TEXTEBOXSIMPLERENDERER_220620110004_H
#define H__TEXTEBOXSIMPLERENDERER_220620110004_H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
//#include "Gaia/TextWidgetBaseRendu.h"
#include "Gaia/widgetRenderers/TextBoxBaseRenderer.h"

#include "Gaia/Color.h"
//#include "Gaia/tools/Observer.h"
//#include "Gaia/Rectangle.h"
#include "Gaia/widgets/TextBox.h"

namespace gaia
{
///////////////////////////////////////////////////////////////////////////////
/// \brief Concrete TextBox renderer based on shapes.
///////////////////////////////////////////////////////////////////////////////
class GAIA_DLL TextBoxSimpleRenderer :
	public TextBoxBaseRenderer//, public gaia::Observer
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor.
	///
	/// \param w : The widgets set to the renderer. Must be a TextBox class, or
	/// inherited.
	///////////////////////////////////////////////////////////////////////////
	TextBoxSimpleRenderer(PtrWidget w = PtrWidget());

	//void update(unsigned int);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the widget.  
	///
	/// \param Gfx : Pointer to the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	virtual void draw_impl(BaseGraphics* Gfx);

	//Rect<double> getTextArea();

	//int computeCaretPosition(const Point& pos);

protected:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the background.
	///
	/// \param Gfx : Pointer to the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	void drawBackground(BaseGraphics* Gfx);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the TextBox's edge.
	///
	/// \param Gfx : Pointer to the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	void drawEdge(BaseGraphics* Gfx);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the visible text.
	///
	/// \param Gfx : Pointer to the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	void drawText(BaseGraphics* Gfx);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the TextBox's caret, if it is currently visible.
	///
	/// \param Gfx : Pointer to the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	void drawCaret(BaseGraphics* Gfx);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Draws the selection.
	///
	/// \param Gfx : Pointer to the graphics engine.
	///////////////////////////////////////////////////////////////////////////
	void drawSelection(BaseGraphics* Gf);

protected:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Called when notified by the model.
	///
	/// \param Observable : Pointer to the model, calling this function.
	///////////////////////////////////////////////////////////////////////////
	//virtual void update(Observable* obs);

protected:
	Color myBackgroundColor; ///< Background color
	Color myEdgeColor1; ///< First color type for edge
	Color myEdgeColor2; ///< Second color type for edge
	Color myEdgeColor3; ///< Third color type for edge

	//float myElapsedTime;
	//bool myMustDisplayCaret;

	//float myTextOffsetX;

	//std::string myTextDisplayed;
};

} //end namespace

#endif