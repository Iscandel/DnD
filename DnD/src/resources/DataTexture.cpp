//#include "DataImage.h"
//
/////////////////////////////////////////////////////////////////////////////////
//// Constructeur par défaut
/////////////////////////////////////////////////////////////////////////////////
//DataImage::DataImage(void)
//{
//}
//
/////////////////////////////////////////////////////////////////////////////////
//// Premier constructeur
/////////////////////////////////////////////////////////////////////////////////
//DataImage::DataImage(const sf::Color& transp, const Coordonnees& offset, const Coordonnees& offset2)
//:monATransparence(true)
//,MonOffset(offset)
//,MonOffset2(offset2)
//,MaCouleurTransparence(transp)
//{
//}
//
/////////////////////////////////////////////////////////////////////////////////
//// Deuxième constructeur
/////////////////////////////////////////////////////////////////////////////////
//DataImage::DataImage(PtrImage MonImg, const Coordonnees& offset, const Coordonnees& offset2,  bool smooth)
//:monATransparence(false)
//,MonOffset(offset)
//,MonOffset2(offset2)
//,MonImage(MonImg)
//{
//	MonImage->SetSmooth(smooth);
//}
//
/////////////////////////////////////////////////////////////////////////////////
//// 3ème constructeur
/////////////////////////////////////////////////////////////////////////////////
//DataImage::DataImage(const Coordonnees& offset, const Coordonnees& offset2)
//:monATransparence(false)
//,MonOffset(offset)
//,MonOffset2(offset2)
//{
//}
//
/////////////////////////////////////////////////////////////////////////////////
//// Destructeur
/////////////////////////////////////////////////////////////////////////////////
//DataImage::~DataImage(void)
//{
//}
//
/////////////////////////////////////////////////////////////////////////////////
//// Détruit l'image
/////////////////////////////////////////////////////////////////////////////////
//void DataImage::libererImage()
//{
//	//réinitialisation du pointeur intelligent 
//	//(-> appel à delete si use_count == 1)
//	MonImage.reset();
//}
//
/////////////////////////////////////////////////////////////////////////////////
//// Recharge l'image avec l'image passée en paramètre
/////////////////////////////////////////////////////////////////////////////////
//void DataImage::recharger(PtrImage MonImg, bool smooth)
//{
//	//static int cpt = 0;
//	//cpt++;
//	//std::cout << cpt << std::endl;
//	MonImage = MonImg;
//
//	//Si on a besoin de mettre de la transparence pour une couleur
//	if(monATransparence)
//		MonImage->CreateMaskFromColor(MaCouleurTransparence);
//
//	MonImage->SetSmooth(smooth);
//}
//
