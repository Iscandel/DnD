#ifndef H__POINT_091020130108__H
#define H__POINT_091020130108__H

///////////////////////////////////////////////////////////////////////////////
/// Utility class for 2D position
///////////////////////////////////////////////////////////////////////////////
template<class T>
struct Point
{
	///////////////////////////////////////////////////////////////////////////////
	/// Constructor
	/// \param x: x position
	/// \param y: y position
	///////////////////////////////////////////////////////////////////////////////
	Point(T x = 0, T y = 0)
	:x(x)
	,y(y)
	{
	}

	T x; ///< x coordinate
	T y; ///< y coordinate
};

///////////////////////////////////////////////////////////////////////////////
/// Compares 2 points. The 2 coordinates must be equal.
///////////////////////////////////////////////////////////////////////////////
inline bool operator == (const Point<int>& c1, const Point<int>& c2)
{
	return c1.x == c2.x && c1.y == c2.y;
}

///////////////////////////////////////////////////////////////////////////////
/// Compares 2 points. The 2 coordinates must be equal.
///////////////////////////////////////////////////////////////////////////////
inline bool operator != (const Point<int>& c1, const Point<int>& c2)
{
	return !(c1 == c2);
}

///////////////////////////////////////////////////////////////////////////////
/// Adds 2 points
///////////////////////////////////////////////////////////////////////////////
template<class T>
inline Point<T> operator + (const Point<T>& c1, const Point<T>& c2)
{
	Point<T> res;

	res.x = c1.x + c2.x;
	res.y = c1.y + c2.y;
	
	return res;
}

///////////////////////////////////////////////////////////////////////////////
/// Adds 2 points
///////////////////////////////////////////////////////////////////////////////
template<class T>
inline Point<T>& operator += (Point<T>& c1, const Point<T>& c2)
{
	c1 = c1 + c2;
	return c1;
};

///////////////////////////////////////////////////////////////////////////////
/// Subtracts 2 points
///////////////////////////////////////////////////////////////////////////////
template<class T>
inline Point<T> operator - (const Point<T>& c1, const Point<T>& c2)
{
	Point<T> res;

	res.x = c1.x - c2.x;
	res.y = c1.y - c2.y;
	
	return res;
}

///////////////////////////////////////////////////////////////////////////////
/// Subtracts 2 points
///////////////////////////////////////////////////////////////////////////////
template<class T>
inline Point<T>& operator -= (Point<T>& c1, const Point<T>& c2)
{
	c1 = c1 - c2;
	return c1;
}

///////////////////////////////////////////////////////////////////////////////
/// point times scalar
///////////////////////////////////////////////////////////////////////////////
template<class T, class U>
inline Point<T> operator * (const Point<T>& c1, U scalar)
{
	Point<T> res;

	res.x = c1.x * scalar;
	res.y = c1.y * scalar;
	
	return res;
}

#endif