#ifndef H__ENGINE_150820130023_H
#define H__ENGINE_150820130023_H

#include "Message.h"
#include <mutex>
#include <queue>

class GameEngine;
class NetworkEngine;
class GraphicEngine;
class SoundEngine;

///////////////////////////////////////////////////////////////////////////////
/// \brief Base class for engines
///////////////////////////////////////////////////////////////////////////////
class Engine
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// Constructor.
	///////////////////////////////////////////////////////////////////////////
	Engine(void);

	///////////////////////////////////////////////////////////////////////////
	/// Destructor.
	///////////////////////////////////////////////////////////////////////////
	~Engine(void);

	///////////////////////////////////////////////////////////////////////////
	/// Returns the game engine.
	/// \return A pointer to the game engine.
	///////////////////////////////////////////////////////////////////////////
	GameEngine* getGameEngine() {return myGame;}

	///////////////////////////////////////////////////////////////////////////
	/// Returns the network engine.
	/// \return A pointer to the network engine.
	///////////////////////////////////////////////////////////////////////////
	NetworkEngine* getNetworkEngine() {return myNetwork;}

	///////////////////////////////////////////////////////////////////////////
	/// Returns the graphic engine.
	/// \return A pointer to the graphic engine.
	///////////////////////////////////////////////////////////////////////////
	GraphicEngine* getGraphicEngine() {return myGraphics;}

	///////////////////////////////////////////////////////////////////////////
	/// Returns the game engine.
	/// \return A pointer to the game engine.
	///////////////////////////////////////////////////////////////////////////
	SoundEngine* getSoundEngine() {return mySound;}

	///////////////////////////////////////////////////////////////////////////
	/// Sends a message to the graphic engine.
	/// \param msg The message to send.
	///////////////////////////////////////////////////////////////////////////
	void sendMessageToGraphic(const Message& msg);

	///////////////////////////////////////////////////////////////////////////
	/// Sends a message to the sound engine.
	/// \param msg The message to send.
	///////////////////////////////////////////////////////////////////////////
	void sendMessageToSound(const Message& msg);

	///////////////////////////////////////////////////////////////////////////
	/// Sends a message to the network engine.
	/// \param msg The message to send.
	///////////////////////////////////////////////////////////////////////////
	void sendMessageToNetwork(const Message& msg);

	///////////////////////////////////////////////////////////////////////////
	/// Sends a message to the game engine.
	/// \param msg The message to send.
	///////////////////////////////////////////////////////////////////////////
	void sendMessageToGame(const Message& msg);

	///////////////////////////////////////////////////////////////////////////
	/// Affects the game engine to this engine.
	/// \param g A pointer to the game engine.
	///////////////////////////////////////////////////////////////////////////
	void linkGameEngine(GameEngine* g) {this->myGame = g;}

	///////////////////////////////////////////////////////////////////////////
	/// Affects the game engine to this engine.
	/// \param g A pointer to the network engine.
	///////////////////////////////////////////////////////////////////////////
	void linkNetworkEngine(NetworkEngine* n) {this->myNetwork = n;}

	///////////////////////////////////////////////////////////////////////////
	/// Affects the game engine to this engine.
	/// \param g A pointer to the graphic engine.
	///////////////////////////////////////////////////////////////////////////
	void linkGraphicEngine(GraphicEngine* g) {this->myGraphics = g;}

	///////////////////////////////////////////////////////////////////////////
	/// Affects the game engine to this engine.
	/// \param g A pointer to the sound engine.
	///////////////////////////////////////////////////////////////////////////
	void linkSoundEngine(SoundEngine* sound) {this->mySound = sound;}

	///////////////////////////////////////////////////////////////////////////
	/// Processes a message.
	/// \param msg The message to process.
	///////////////////////////////////////////////////////////////////////////
	virtual void processMessage(const Message& msg) = 0;

	///////////////////////////////////////////////////////////////////////////
	/// Updates the engine.
	///////////////////////////////////////////////////////////////////////////
	virtual void update() = 0;

	///////////////////////////////////////////////////////////////////////////
	/// Processes the message queue.
	///////////////////////////////////////////////////////////////////////////
	void processQueue();

protected:
	std::queue<Message> myMessageQueue; //<Array of messages
	std::mutex myMutexQueue;

	///////////////////////////////////////////////////////////////////////////
	/// Pushes a new message into the engine.
	/// \param msg The message to add.
	///////////////////////////////////////////////////////////////////////////
	void addMessage(const Message& msg);

private:
	GameEngine* myGame; ///< Pointer to the game engine
	NetworkEngine* myNetwork; ///< Pointer to the network engine
	GraphicEngine* myGraphics; ///< Pointer to the graphic engine
	SoundEngine* mySound; ///< Pointer to the sound engine
};

#endif